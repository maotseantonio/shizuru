#!/usr/bin/env bash

# Robust Niri Waybar toggler with full error handling

WAYBAR_PID_FILE="/tmp/waybar.pid"
WAYBAR_COMMAND="waybar"
POLL_INTERVAL=0.5
EDGE_THRESHOLD=25  # 25% from screen edges

# Debug logging
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> /tmp/niri-waybar-debug.log
}

# Safe number parsing
get_number() {
    local input="$1"
    # Extract first number found
    local num=$(echo "$input" | grep -oE '[0-9]+' | head -n1)
    [[ -n "$num" ]] && echo "$num" || echo "0"
}

# Get screen width with fallback
get_screen_width() {
    local output=$(niri msg outputs 2>/dev/null)
    local width=$(get_number "$output")
    [[ "$width" -gt 0 ]] && echo "$width" || echo "1920"
}

# Get window position with fallback
get_window_pos() {
    local output=$(niri msg focused-window 2>/dev/null)
    get_number "$output"
}

# Waybar control functions
start_waybar() {
    if [ ! -f "$WAYBAR_PID_FILE" ] || ! pgrep -F "$WAYBAR_PID_FILE" >/dev/null; then
        log "Starting Waybar"
        $WAYBAR_COMMAND >/dev/null 2>&1 &
        echo $! > "$WAYBAR_PID_FILE"
    fi
}

stop_waybar() {
    if [ -f "$WAYBAR_PID_FILE" ]; then
        log "Stopping Waybar"
        kill -9 $(cat "$WAYBAR_PID_FILE") 2>/dev/null
        rm -f "$WAYBAR_PID_FILE"
    fi
}

# Initialize
log "Initializing Waybar toggler"
screen_width=$(get_screen_width)
threshold=$((screen_width * EDGE_THRESHOLD / 100))
last_state="none"

log "Screen width: $screen_width, Threshold: $threshold"

# Main loop
while true; do
    x_pos=$(get_window_pos)
    
    # Validate position
    if ! [[ "$x_pos" =~ ^[0-9]+$ ]]; then
        log "Invalid position: $x_pos"
        sleep $POLL_INTERVAL
        continue
    fi

    # Determine state
    if [ "$x_pos" -gt $((screen_width - threshold)) ]; then
        current_state="right"
    elif [ "$x_pos" -lt "$threshold" ]; then
        current_state="left"
    else
        current_state="middle"
    fi

    # Only act on state changes
    if [ "$current_state" != "$last_state" ]; then
        case "$current_state" in
            "right") stop_waybar ;;
            "left") start_waybar ;;
        esac
        last_state="$current_state"
        log "Window at $x_pos, state: $current_state"
    fi

    sleep $POLL_INTERVAL
done

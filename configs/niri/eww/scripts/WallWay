#!/usr/bin/env bash
#  ██╗    ██╗ █████╗ ██╗     ██╗
#  ██║    ██║██╔══██╗██║     ██║
#  ██║ █╗ ██║███████║██║     ██║
#  ██║███╗██║██╔══██║██║     ██║
#  ╚███╔███╔╝██║  ██║███████╗███████╗
#   ╚══╝╚══╝ ╚═╝  ╚═╝╚══════╝╚══════╝way

# Obtener nombre del rice actual
read -r current_rice <"$HOME/.config/hypr/eww/themes/.theme"
wall_dir="$HOME/.config/hypr/eww/themes/$current_rice/walls"
cacheDir="$HOME/.cache/$USER/$current_rice"

# Current Bar
read -r BAR < "$HOME"/.config/hypr/eww/themes/.bar

# Crear cacheDir si no existe
[ -d "$cacheDir" ] || mkdir -p "$cacheDir"

# Obtener nombre del monitor enfocado
focused_monitor=$(bspc query -M -m focused --names)

# Obtener resolución del monitor y DPI
monitor_width=$(xrandr | grep -w -- "$focused_monitor" | grep -o '[0-9]\+x[0-9]\+' | cut -d 'x' -f 1)
screen_dpi=$(xdpyinfo | awk '/resolution/{print $2; exit}' | cut -d 'x' -f1)
icon_size=$(( (monitor_width * 14) / (${screen_dpi:-96} ) ))

# Wallpaper recibido como argumento
wallpaper="$1"
[ -f "$wallpaper" ] || {
    echo "El archivo no existe: $wallpaper"
    exit 1
}

# Asignar bandera para el wallpaper
echo "wallpaper=$1" > $wall_dir/.wallpaper

# Procesar imagen
nombre_archivo=$(basename "$wallpaper")
cache_file="${cacheDir}/${nombre_archivo}"
md5_file="${cacheDir}/.${nombre_archivo}.md5"
lock_file="${cacheDir}/.lock_${nombre_archivo}"

current_md5=$(xxh64sum "$wallpaper" | cut -d' ' -f1)

(
    flock -x 200
    if [ ! -f "$cache_file" ] || [ ! -f "$md5_file" ] || [ "$current_md5" != "$(cat "$md5_file" 2>/dev/null)" ]; then
        magick "$wallpaper" -resize 500x500^ -gravity center -extent 500x500 "$cache_file"
        echo "$current_md5" > "$md5_file"
    fi
    rm -f "$lock_file"
) 200>"$lock_file"

# Limpiar archivos cache huérfanos
for cached in "$cacheDir"/*; do
    [ -f "$cached" ] || continue
    original="${wall_dir}/$(basename "$cached")"
    if [ ! -f "$original" ]; then
        nombre_archivo=$(basename "$cached")
        rm -f "$cached" \
            "${cacheDir}/.${nombre_archivo}.md5" \
            "${cacheDir}/.lock_${nombre_archivo}"
    fi
done

# Limpiar locks restantes
rm -f "${cacheDir}"/.lock_* 2>/dev/null || true

# Ruta destino del .webp final
image_dir="$HOME/.config/hypr/eww/images"
final_image="$image_dir/$current_rice.webp"
preview_image="$image_dir/preview.webp"

# Convertir o copiar desde la imagen resized (el cache_file)
if [[ "$cache_file" != *.webp ]]; then
    convert "$cache_file" "$final_image"
    cp -f "$final_image" "$preview_image"
else
    cp -f "$cache_file" "$final_image"
    cp -f "$cache_file" "$preview_image"
fi

# Set Wallpaper to Pywal
if [[ "$current_rice" == "Pywal" ]]; then
    wal -i "$wallpaper"
	$HOME/.config/hypr/eww/themes/themepw.sh &
fi
